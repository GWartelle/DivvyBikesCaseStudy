install.packages("tidyverse")
library(lubricate)
library(lubridate)
print("Coding in R")
?
print()
?print()
# Here's an example of an variable
installed.packages()
library(tidyverse)
browseVignettes("ggplot2")
View(ToothGrowth)
install.packages('dplyr')
install.packages("dplyr")
filtered_tg <- filter(ToothGrowth,dose==0.5)
View(filtered_tg)
View(ToothGrowth)
filtered_tg <- filter(ToothGrowth,dose==0.5)
data("ToothGrowth")
filtered_tg <- filter(ToothGrowth,dose==0.5)
data("ToothGrowth")
View(ToothGrowth)
filtered_tg <- filter(ToothGrowth,dose==0.5)
filtered_tg <- filter(ToothGrowth, dose==0.5)
filtered_tg <- filter(ToothGrowth,Dose==0.5)
filtered_tg <- filter(ToothGrowth,dose==0.5)
library(dplyr)
filtered_tg <- filter(ToothGrowth,dose==0.5)
View(filtered_tg)
arrange(filtered_tg,len)
filtered_toothgrowth <- ToothGrowth %>%
filter(dose==0.5) %>%
arrange(len)
filtered_toothgrowth <- ToothGrowth %>%
filter(dose==0.5) %>%
arrange(len)
filtered_toothgrowth <- ToothGrowth %>%
filter(dose==0.5) %>%
arrange(len)
librery(dplyr)
library(dplyr)
data("ToothGrowth")
library(dplyr)
filtered_toothgrowth <- ToothGrowth %>%
filter(dose==0.5) %>%
arrange(len)
filtered_toothgrowth <- ToothGrowth %>%
filter(dose==0.5) %>%
arrange(len)
View(filtered_toothgrowth)
filtered_toothgrowth <- ToothGrowth %>%
filter(dose==0.5) %>%
arrange(len)
View(filtered_toothgrowth)
filtered_toothgrowth <- ToothGrowth %>%
filter(dose==0.5) %>%
group_by(supp) %>%
summarize(mean_len = mean(len,na.rm = T),.group="drop")
View(filtered_toothgrowth)
library(ggplot2)
data("diamonds")
View(diamonds)
head(diamonds)
str(diamonds)
colnames(diamonds)
library(tidyverse)
mutate(diamonds, carat_2=carat*100)
mutate(diamonds,carat_2=carat*100)
library(tidyverse)
data(diamonds)
View(diamonds)
library(tidyverse)
data(diamonds)
as_tibble(diamonds)
data("mtcars")
data(mtcars)
data("mtcars")
mtcars
mtcars
View(mtcars)
read_csv(readr_example(mtcars.csv))
read_csv(readr_example("mtcars.csv"))
library(readxl)
read_excel(readxl_example("type-me.xlsx"))
excel_sheets(readxl_example("tyoe-me.xlsx"))
excel_sheets(readxl_example("type-me.xlsx"))
read_excel(readxl_example("type-me.xlsx"), sheet = "numeric_coercion")
install.packages("here")
install.packages("tidyverse")
library(tidyverse)
install.packages("tidyverse")
install.packages("installr")
install.packages(c("blob", "broom", "bslib", "cachem", "cli", "colorspace", "commonmark", "curl", "dbplyr", "digest", "dplyr", "dtplyr", "evaluate", "fansi", "fastmap", "fs", "gargle", "ggplot2", "googledrive", "googlesheets4", "gtable", "haven", "highr", "hms", "htmltools", "httr", "httr2", "isoband", "knitr", "markdown", "modelr", "openssl", "osmdata", "pillar", "processx", "ps", "rlang", "rmarkdown", "RSQLite", "sass", "stringi", "tibble", "timechange", "tinytex", "tzdb", "utf8", "vctrs", "viridis", "viridisLite", "vroom", "xfun", "xml2", "yaml"))
library(installr
)
sessionInfo()
library(tidyverse)
library(skimr)
library(RANN)
library(patchwork)
library(RColorBrewer)
trip_data <- list.files("./Data/Study Data", full.names = TRUE) %>%
lapply(read_csv) %>%
bind_rows()
library(tidyverse)
library(skimr)
library(RANN)
library(patchwork)
library(RColorBrewer)
sessionInfo()
library(installr)
install.packages(c("dplyr", "ggplot2", "knitr", "markdown", "purrr", "rmarkdown"))
install.packages(c("dplyr", "ggplot2", "knitr", "markdown", "purrr", "rmarkdown"))
install.packages(c("dplyr", "ggplot2", "knitr", "markdown", "purrr", "rmarkdown"))
install.packages(c("dplyr", "ggplot2", "knitr", "markdown", "purrr", "rmarkdown"))
install.packages(c("dplyr", "ggplot2", "knitr", "markdown", "purrr", "readxl", "rmarkdown"))
install.packages(c("dplyr", "ggplot2", "knitr", "markdown", "purrr", "readxl", "rmarkdown"))
install.packages(c("dplyr", "ggplot2", "knitr", "markdown", "patchwork", "purrr", "readxl", "rmarkdown"))
trip_data <- list.files("./Data/Study Data", full.names = TRUE) %>%
lapply(read_csv) %>%
bind_rows()
library(tidyverse)
library(skimr)
library(RANN)
library(patchwork)
library(RColorBrewer)
trip_data <- list.files("./Data/Study Data", full.names = TRUE) %>%
lapply(read_csv) %>%
bind_rows()
View(head(trip_data))
skim_without_charts(trip_data)
clean_data <- trip_data %>%
distinct(ride_id, .keep_all = TRUE)
clean_data$rideable_type <- factor(clean_data$rideable_type)
clean_data$member_casual <- factor(clean_data$member_casual)
clean_data <- clean_data %>%
drop_na(end_lat, end_lng)
clean_data <- clean_data %>%
filter(end_lat != 0, end_lng != 0)
start_id_NAs <- clean_data %>%
subset(is.na(start_station_id) & !is.na(start_station_name)) %>%
count(start_station_name)
View(start_id_NAs)
end_id_NAs <- clean_data %>%
subset(is.na(end_station_id) & !is.na(end_station_name)) %>%
count(end_station_name)
View(end_id_NAs)
start_loc_variation <- clean_data %>%
filter(start_station_name == "Stony Island Ave & 63rd St") %>%
count(start_location)
clean_data <- clean_data %>%
drop_na(end_lat, end_lng)
clean_data <- clean_data %>%
filter(end_lat != 0, end_lng != 0)
station_id <- clean_data %>%
select(start_station_id, end_station_id) %>%
gather(key = "id_type", value = "station_id", start_station_id:end_station_id)
station_name <- clean_data %>%
select(start_station_name, end_station_name) %>%
gather(key = "name_type", value = "station_name", start_station_name:end_station_name)
true_stations <- cbind(station_id, station_name) %>%
count(station_id, station_name) %>%
na.omit() %>%
group_by(station_id) %>%
slice_max(order_by = n, n = 1, with_ties = FALSE)
sum(duplicated(true_stations$station_id))
sum(duplicated(true_stations$station_name))
true_stations <- true_stations %>%
group_by(station_name) %>%
slice_max(order_by = n, n = 1, with_ties = FALSE) %>%
select(-n)
sum(duplicated(true_stations$station_id))
sum(duplicated(true_stations$station_name))
clean_data <- clean_data %>%
left_join(true_stations, by = c("start_station_id" = "station_id"))
start_name_change <- !is.na(clean_data$start_station_name) &
!is.na(clean_data$station_name) &
clean_data$start_station_name != clean_data$station_name
clean_data$start_station_name[start_name_change] <- clean_data$station_name[start_name_change]
clean_data <- clean_data %>%
select(-station_name)
clean_data <- clean_data %>%
left_join(true_stations, by = c("end_station_id" = "station_id"))
end_name_change <- !is.na(clean_data$end_station_name) &
!is.na(clean_data$station_name) &
clean_data$end_station_name != clean_data$station_name
clean_data$end_station_name[end_name_change] <- clean_data$station_name[end_name_change]
clean_data <- clean_data %>%
select(-station_name)
skim_without_charts(clean_data)
na_check <- clean_data[!complete.cases(clean_data), ]
na_chart <- na_check %>%
count(member_casual, rideable_type) %>%
ggplot(mapping = aes(x = rideable_type, y = n, fill = rideable_type)) +
geom_col() +
facet_wrap(vars(member_casual))
na_chart
clean_data <- clean_data %>%
mutate(across(c('start_lat', 'start_lng', 'end_lat', 'end_lng'), \(x) round(x, digits = 5))) %>%
mutate(start_location = paste(start_lat,start_lng,sep = ","),
end_location = paste(end_lat,end_lng,sep = ","))
station_lat <- clean_data %>%
select(start_lat, end_lat) %>%
gather(key = "lat_type", value = "station_lat", start_lat:end_lat)
station_lng <- clean_data %>%
select(start_lng, end_lng) %>%
gather(key = "lng_type", value = "station_lng", start_lng:end_lng)
station_location <- clean_data %>%
select(start_location, end_location) %>%
gather(key = "location_type", value = "station_location", start_location:end_location)
true_stations <- cbind(station_id, station_name, station_lat, station_lng, station_location) %>%
count(station_id, station_name, station_lat, station_lng, station_location) %>%
na.omit() %>%
group_by(station_id) %>%
slice_max(order_by = n, n = 1, with_ties = FALSE) %>%
group_by(station_name) %>%
slice_max(order_by = n, n = 1, with_ties = FALSE) %>%
select(-n)
sum(duplicated(true_stations$station_id))
sum(duplicated(true_stations$station_name))
start_missing <- clean_data %>%
select(ride_id, start_station_name, start_lng, start_lat) %>%
rename(start_missing_name = start_station_name) %>%
filter(is.na(start_missing_name))
end_missing <- clean_data %>%
select(ride_id, end_station_name, end_lng, end_lat) %>%
rename(end_missing_name = end_station_name) %>%
filter(is.na(end_missing_name))
start_coords <- as.matrix(start_missing[, c("start_lng", "start_lat")])
end_coords <- as.matrix(end_missing[, c("end_lng", "end_lat")])
true_coords <- as.matrix(true_stations[, c("station_lng", "station_lat")])
start_neighbors <- RANN::nn2(true_coords, start_coords, k = 1)$nn.idx
start_nearest_stations <- true_stations$station_name[start_neighbors]
start_missing$start_missing_name <- start_nearest_stations
end_neighbors <- RANN::nn2(true_coords, end_coords, k = 1)$nn.idx
end_nearest_stations <- true_stations$station_name[end_neighbors]
end_missing$end_missing_name <- end_nearest_stations
filling_stations <- full_join(start_missing, end_missing, by = "ride_id") %>%
select(ride_id, start_missing_name, end_missing_name)
clean_data <- clean_data %>%
left_join(filling_stations, by = "ride_id")
clean_data$start_station_name <- ifelse(is.na(clean_data$start_station_name),
clean_data$start_missing_name,
clean_data$start_station_name)
clean_data$end_station_name <- ifelse(is.na(clean_data$end_station_name),
clean_data$end_missing_name,
clean_data$end_station_name)
clean_data <- clean_data %>%
select(-start_missing_name, -end_missing_name)
skim_without_charts(clean_data)
true_stations <- true_stations %>%
select(-station_id)
clean_data <- clean_data %>%
left_join(true_stations, by = c("start_station_name" = "station_name"))
start_loc_change <- !is.na(clean_data$start_location) &
!is.na(clean_data$station_location) &
clean_data$start_location != clean_data$station_location
clean_data$start_location[start_loc_change] <- clean_data$station_location[start_loc_change]
clean_data$start_lat[start_loc_change] <- clean_data$station_lat[start_loc_change]
clean_data$start_lng[start_loc_change] <- clean_data$station_lng[start_loc_change]
clean_data <- clean_data %>%
select(-station_lat, -station_lng, -station_location)
View(head(clean_data))
clean_data$start_location <- ifelse(start_loc_change, clean_data$station_location, clean_data$start_location)
clean_data <- clean_data %>%
left_join(true_stations, by = c("end_station_name" = "station_name"))
end_loc_change <- !is.na(clean_data$end_location) &
!is.na(clean_data$station_location) &
clean_data$end_location != clean_data$station_location
clean_data$end_location[end_loc_change] <- clean_data$station_location[end_loc_change]
clean_data$end_lat[end_loc_change] <- clean_data$station_lat[end_loc_change]
clean_data$end_lng[end_loc_change] <- clean_data$station_lng[end_loc_change]
clean_data <- clean_data %>%
select(-station_lat, -station_lng, -station_location)
skim_without_charts(clean_data)
start_lat <- clean_data$start_lat
start_lng <- clean_data$start_lng
end_lat <- clean_data$end_lat
end_lng <- clean_data$end_lng
start_lat_rad <- start_lat * pi / 180
start_lng_rad <- start_lng * pi / 180
end_lat_rad <- end_lat * pi / 180
end_lng_rad <- end_lng * pi / 180
delta_lat <- end_lat_rad - start_lat_rad
delta_lng <- end_lng_rad - start_lng_rad
a <- sin(delta_lat / 2)^2 + cos(start_lat_rad) * cos(end_lat_rad) * sin(delta_lng / 2)^2
c <- 2 * atan2(sqrt(a), sqrt(1 - a))
earth_radius <- 6371000
distances <- round((earth_radius * c), digits = -2)
clean_data$distance <- distances
summary(clean_data$distance)
clean_data <- clean_data %>%
mutate("trip_duration" = round(difftime(ended_at, started_at, units = "mins")))
summary(as.numeric(clean_data$trip_duration))
duration_mean <- as.numeric(round(mean(clean_data$trip_duration)))
duration_sd <- round(sd(clean_data$trip_duration))
outliers_limit <- as.numeric(round(duration_mean + (duration_sd * 3)))
clean_data <- clean_data %>%
filter(trip_duration > 0 & trip_duration <= outliers_limit)
summary(as.numeric(clean_data$trip_duration))
clean_data <- clean_data %>%
mutate("month" = month(started_at, label = TRUE , abbr = TRUE),
"week" = week(started_at),
"week_day" = wday(started_at, label = TRUE, abbr = TRUE),
"hour" = hour(started_at))
head(clean_data)
levels(clean_data$week_day)
levels(clean_data$month)
head(clean_data)
processed_data <- clean_data %>%
select(-ride_id, -started_at, -ended_at, -start_station_id, -end_station_id, -start_location, -end_location)
head(processed_data, n=10)
skim_without_charts(processed_data)
head(processed_data, n=10)
clean_data$week_day <- fct_relevel(clean_data$week_day, "dim\\.", after = Inf)
levels(clean_data$week_day) <- c('Mon','Tue','Wed','Thu','Fri','Sat','Sun')
levels(clean_data$month) <- c("Jan","Feb","Mar","Apr","May","Jun",
"Jul","Aug","Sep","Oct","Nov","Dec")
processed_data <- clean_data %>%
select(-ride_id, -started_at, -ended_at, -start_station_id, -end_station_id, -start_location, -end_location)
head(processed_data, n=10)
skim_without_charts(processed_data)
saveRDS(processed_data, file = "Output/Data/processed_data.rds")
rm(list = ls())
install.packages(c("askpass", "broom", "bslib", "cli", "cpp11", "curl", "data.table", "dbplyr", "digest", "dplyr", "evaluate", "fansi", "fontawesome", "fs", "gargle", "ggplot2", "googledrive", "googlesheets4", "gtable", "haven", "htmltools", "httr", "jsonlite", "knitr", "labeling", "lifecycle", "lubridate", "markdown", "openssl", "prettyunits", "processx", "progress", "ragg", "rematch", "rlang", "rstudioapi", "sass", "scales", "stringi", "stringr", "sys", "systemfonts", "textshaping", "tinytex", "utf8", "uuid", "vctrs", "vroom", "withr", "xfun", "xml2", "yaml"))
install.packages(c("askpass", "broom", "bslib", "cli", "cpp11", "curl", "data.table", "dbplyr", "digest", "dplyr", "evaluate", "fansi", "fontawesome", "fs", "gargle", "ggplot2", "googledrive", "googlesheets4", "gtable", "haven", "htmltools", "httr", "jsonlite", "knitr", "labeling", "lifecycle", "lubridate", "markdown", "openssl", "prettyunits", "processx", "progress", "ragg", "rematch", "rlang", "rstudioapi", "sass", "scales", "stringi", "stringr", "sys", "systemfonts", "textshaping", "tinytex", "utf8", "uuid", "vctrs", "vroom", "withr", "xfun", "xml2", "yaml"))
install.packages(c("askpass", "broom", "bslib", "cli", "cpp11", "curl", "data.table", "dbplyr", "digest", "dplyr", "evaluate", "fansi", "fontawesome", "fs", "gargle", "ggplot2", "googledrive", "googlesheets4", "gtable", "haven", "htmltools", "httr", "jsonlite", "knitr", "labeling", "lifecycle", "lubridate", "markdown", "openssl", "prettyunits", "processx", "progress", "ragg", "rematch", "rlang", "rstudioapi", "sass", "scales", "stringi", "stringr", "sys", "systemfonts", "textshaping", "tinytex", "utf8", "uuid", "vctrs", "vroom", "withr", "xfun", "xml2", "yaml"))
install.packages("installr")
library(installr)
sessionInfo()
install.packages(c("cli", "rlang", "stringi", "vctrs"))
# Updating needed R packages
if (!requireNamespace("tidyverse", quietly = TRUE)) install.packages("tidyverse")
if (!requireNamespace("skimr", quietly = TRUE)) install.packages("skimr")
if (!requireNamespace("RANN", quietly = TRUE)) install.packages("RANN")
if (!requireNamespace("patchwork", quietly = TRUE)) install.packages("patchwork")
if (!requireNamespace("RColorBrewer", quietly = TRUE)) install.packages("RColorBrewer")
if (!requireNamespace("tibble", quietly = TRUE)) install.packages("tibble")
# Loading needed R packages
library(tidyverse)
library(skimr)
library(RANN)
library(patchwork)
library(RColorBrewer)
library(tibble)
# Keeping only the variables we'll be working with
processed_data <- clean_data %>%
select(-ride_id, -started_at, -ended_at, -start_station_id, -end_station_id, -start_location, -end_location)
processed_data <- readRDS(file = "Output/Data/processed_data.rds")
# Loading the processed dataset
processed_data <- readRDS(file = "./Output/Data/processed_data.rds")
# Loading the processed dataset
processed_data <- readRDS(file = "../Output/Data/processed_data.rds")
# Loading needed R packages
library(tidyverse)
library(skimr)
library(RANN)
library(patchwork)
library(RColorBrewer)
library(tibble)
# Loading the processed dataset
processed_data <- readRDS(file = "../Output/Data/processed_data.rds")
getwd()
# Loading the processed dataset
processed_data <- readRDS(file = "../Output/Data/processed_data.rds")
getwd()
# Setting the working directory
here_root <- here::here()
library(here)
library(here)
library(here)
if (!requireNamespace("here", quietly = TRUE)) install.packages("here")
library(here)
# Setting the working directory
here_root <- here::here()
setwd(here_root)
getwd()
# Setting the working directory
here_root <- here::here()
setwd(here_root)
getwd()
# Setting the working directory
here_root <- here::here()
here_root
setwd(here_root)
getwd()
setwd("../")
getwd()
# Setting the working directory
setwd("../Desktop/IT Courses/DA with R/Google DA/Course 8/Case Studies/DivvyBikesCaseStudy")
# Setting the working directory
setwd("../Bureau/IT Courses/DA with R/Google DA/Course 8/Case Studies/DivvyBikesCaseStudy")
# Setting the working directory
setwd("../Bureau")
# Setting the working directory
setwd("../Desktop")
# Setting the working directory
setwd("../")
getwd()
# Setting the working directory
setwd("./gwart/Desktop")
getwd()
# Setting the working directory
setwd("./gwart/Desktop/IT Courses/DA with R/Google DA/Course 8/Case Studies/DivvyBikesCaseStudy")
# Setting the working directory
setwd("./IT Courses/DA with R/Google DA/Course 8/Case Studies/DivvyBikesCaseStudy")
getwd()
# Loading the processed dataset
processed_data <- readRDS(file = "./Output/Data/processed_data.rds")
# Creating a circular diagram to represent rideable type usage
member_rideable <- processed_data %>%
filter(member_casual == "member") %>%
count(rideable_type) %>%
ggplot(mapping = aes(x ="", y = n, fill=rideable_type)) +
geom_bar(stat = "identity", width = 1, color="white") +
scale_fill_manual(values = c("classic_bike"="#F8766D",
"electric_bike"="#619CFF")) +
coord_polar("y", start = 0) +
theme_void() +
labs(title = "Member rideables") +
theme(plot.title = element_text(hjust = 0.5))
casual_rideable <- processed_data %>%
filter(member_casual == "casual") %>%
count(rideable_type) %>%
ggplot(mapping = aes(x ="", y = n, fill=rideable_type)) +
geom_bar(stat = "identity", width = 1, color="white") +
coord_polar("y", start = 0) +
theme_void() +
labs(title = "Casual rideables") +
theme(plot.title = element_text(hjust = 0.5))
rideable_usage <- (member_rideable + casual_rideable) +
plot_annotation(title = "Member vs. Casual rideables usage",
theme = theme(plot.title = element_text(hjust = 0.4)))
rideable_usage
# Clearing the workspace
rm(list = ls())
getwd()
# Loading needed R packages
library(tidyverse)
library(skimr)
library(RANN)
library(patchwork)
library(RColorBrewer)
library(tibble)
# Loading the processed dataset
processed_data <- readRDS(file = "./Output/Data/processed_data.rds")
# Creating a circular diagram to represent rideable type usage
member_rideable <- processed_data %>%
filter(member_casual == "member") %>%
count(rideable_type) %>%
ggplot(mapping = aes(x ="", y = n, fill=rideable_type)) +
geom_bar(stat = "identity", width = 1, color="white") +
scale_fill_manual(values = c("classic_bike"="#F8766D",
"electric_bike"="#619CFF")) +
coord_polar("y", start = 0) +
theme_void() +
labs(title = "Member rideables") +
theme(plot.title = element_text(hjust = 0.5))
casual_rideable <- processed_data %>%
filter(member_casual == "casual") %>%
count(rideable_type) %>%
ggplot(mapping = aes(x ="", y = n, fill=rideable_type)) +
geom_bar(stat = "identity", width = 1, color="white") +
coord_polar("y", start = 0) +
theme_void() +
labs(title = "Casual rideables") +
theme(plot.title = element_text(hjust = 0.5))
rideable_usage <- (member_rideable + casual_rideable) +
plot_annotation(title = "Member vs. Casual rideables usage",
theme = theme(plot.title = element_text(hjust = 0.4)))
rideable_usage
